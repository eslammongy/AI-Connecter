// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'features/chatting/domain/entities/answer_entity.dart';
import 'features/chatting/domain/entities/chat_entity.dart';
import 'features/chatting/domain/entities/question_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 6515688378268207506),
      name: 'AnswerEntity',
      lastPropertyId: const obx_int.IdUid(7, 5332370516383242632),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5779473724287387539),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7569942083014185250),
            name: 'text',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3179838622352396168),
            name: 'isAnswer',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1347857066603865505),
            name: 'hasFile',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4504866068858501021),
            name: 'filePath',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5496864970093132583),
            name: 'dateTime',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5332370516383242632),
            name: 'answerId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 8526333955756560926),
            relationTarget: 'QuestionEntity')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 1506482876871564116),
      name: 'ChatEntity',
      lastPropertyId: const obx_int.IdUid(2, 7128184729520767554),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 166065103600434097),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7128184729520767554),
            name: 'title',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'dbQuestions', srcEntity: 'QuestionEntity', srcField: '')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 3621640250726286046),
      name: 'QuestionEntity',
      lastPropertyId: const obx_int.IdUid(4, 6614795561698561119),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3242274416983178702),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8678288974386550561),
            name: 'question',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8968133585935378034),
            name: 'hasFile',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6614795561698561119),
            name: 'questionDataId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 313957387510079314),
            relationTarget: 'ChatEntity')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'data', srcEntity: 'AnswerEntity', srcField: '')
      ])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(3, 3621640250726286046),
      lastIndexId: const obx_int.IdUid(2, 313957387510079314),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    AnswerEntity: obx_int.EntityDefinition<AnswerEntity>(
        model: _entities[0],
        toOneRelations: (AnswerEntity object) => [object.answer],
        toManyRelations: (AnswerEntity object) => {},
        getId: (AnswerEntity object) => object.id,
        setId: (AnswerEntity object, int id) {
          object.id = id;
        },
        objectToFB: (AnswerEntity object, fb.Builder fbb) {
          final textOffset =
              object.text == null ? null : fbb.writeString(object.text!);
          final filePathOffset = object.filePath == null
              ? null
              : fbb.writeString(object.filePath!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, textOffset);
          fbb.addBool(2, object.isAnswer);
          fbb.addBool(3, object.hasFile);
          fbb.addOffset(4, filePathOffset);
          fbb.addInt64(5, object.dateTime?.millisecondsSinceEpoch);
          fbb.addInt64(6, object.answer.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateTimeValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final textParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final isAnswerParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false);
          final hasFileParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false);
          final filePathParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final dateTimeParam = dateTimeValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(dateTimeValue);
          final object = AnswerEntity(
              text: textParam,
              isAnswer: isAnswerParam,
              hasFile: hasFileParam,
              filePath: filePathParam,
              dateTime: dateTimeParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.answer.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.answer.attach(store);
          return object;
        }),
    ChatEntity: obx_int.EntityDefinition<ChatEntity>(
        model: _entities[1],
        toOneRelations: (ChatEntity object) => [],
        toManyRelations: (ChatEntity object) => {
              obx_int.RelInfo<QuestionEntity>.toOneBacklink(4, object.id,
                      (QuestionEntity srcObject) => srcObject.questionData):
                  object.dbQuestions
            },
        getId: (ChatEntity object) => object.id,
        setId: (ChatEntity object, int id) {
          object.id = id;
        },
        objectToFB: (ChatEntity object, fb.Builder fbb) {
          final titleOffset =
              object.title == null ? null : fbb.writeString(object.title!);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final object = ChatEntity(id: idParam, title: titleParam);
          obx_int.InternalToManyAccess.setRelInfo<ChatEntity>(
              object.dbQuestions,
              store,
              obx_int.RelInfo<QuestionEntity>.toOneBacklink(4, object.id,
                  (QuestionEntity srcObject) => srcObject.questionData));
          return object;
        }),
    QuestionEntity: obx_int.EntityDefinition<QuestionEntity>(
        model: _entities[2],
        toOneRelations: (QuestionEntity object) => [object.questionData],
        toManyRelations: (QuestionEntity object) => {
              obx_int.RelInfo<AnswerEntity>.toOneBacklink(7, object.id,
                  (AnswerEntity srcObject) => srcObject.answer): object.data
            },
        getId: (QuestionEntity object) => object.id,
        setId: (QuestionEntity object, int id) {
          object.id = id;
        },
        objectToFB: (QuestionEntity object, fb.Builder fbb) {
          final questionOffset = object.question == null
              ? null
              : fbb.writeString(object.question!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, questionOffset);
          fbb.addBool(2, object.hasFile);
          fbb.addInt64(3, object.questionData.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final questionParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final hasFileParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false);
          final object = QuestionEntity(
              id: idParam, question: questionParam, hasFile: hasFileParam);
          object.questionData.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.questionData.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<QuestionEntity>(
              object.data,
              store,
              obx_int.RelInfo<AnswerEntity>.toOneBacklink(
                  7, object.id, (AnswerEntity srcObject) => srcObject.answer));
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [AnswerEntity] entity fields to define ObjectBox queries.
class AnswerEntity_ {
  /// See [AnswerEntity.id].
  static final id =
      obx.QueryIntegerProperty<AnswerEntity>(_entities[0].properties[0]);

  /// See [AnswerEntity.text].
  static final text =
      obx.QueryStringProperty<AnswerEntity>(_entities[0].properties[1]);

  /// See [AnswerEntity.isAnswer].
  static final isAnswer =
      obx.QueryBooleanProperty<AnswerEntity>(_entities[0].properties[2]);

  /// See [AnswerEntity.hasFile].
  static final hasFile =
      obx.QueryBooleanProperty<AnswerEntity>(_entities[0].properties[3]);

  /// See [AnswerEntity.filePath].
  static final filePath =
      obx.QueryStringProperty<AnswerEntity>(_entities[0].properties[4]);

  /// See [AnswerEntity.dateTime].
  static final dateTime =
      obx.QueryDateProperty<AnswerEntity>(_entities[0].properties[5]);

  /// See [AnswerEntity.answer].
  static final answer = obx.QueryRelationToOne<AnswerEntity, QuestionEntity>(
      _entities[0].properties[6]);
}

/// [ChatEntity] entity fields to define ObjectBox queries.
class ChatEntity_ {
  /// See [ChatEntity.id].
  static final id =
      obx.QueryIntegerProperty<ChatEntity>(_entities[1].properties[0]);

  /// See [ChatEntity.title].
  static final title =
      obx.QueryStringProperty<ChatEntity>(_entities[1].properties[1]);

  /// see [ChatEntity.dbQuestions]
  static final dbQuestions =
      obx.QueryBacklinkToMany<QuestionEntity, ChatEntity>(
          QuestionEntity_.questionData);
}

/// [QuestionEntity] entity fields to define ObjectBox queries.
class QuestionEntity_ {
  /// See [QuestionEntity.id].
  static final id =
      obx.QueryIntegerProperty<QuestionEntity>(_entities[2].properties[0]);

  /// See [QuestionEntity.question].
  static final question =
      obx.QueryStringProperty<QuestionEntity>(_entities[2].properties[1]);

  /// See [QuestionEntity.hasFile].
  static final hasFile =
      obx.QueryBooleanProperty<QuestionEntity>(_entities[2].properties[2]);

  /// See [QuestionEntity.questionData].
  static final questionData =
      obx.QueryRelationToOne<QuestionEntity, ChatEntity>(
          _entities[2].properties[3]);

  /// see [QuestionEntity.data]
  static final data = obx.QueryBacklinkToMany<AnswerEntity, QuestionEntity>(
      AnswerEntity_.answer);
}
